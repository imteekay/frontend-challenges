{"ast":null,"code":"import { Transport } from \"../transport.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\"; // detect ReactNative environment\n\nconst isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n  /**\n   * WebSocket transport constructor.\n   *\n   * @api {Object} connection options\n   * @api public\n   */\n  constructor(opts) {\n    super(opts);\n    this.supportsBinary = !opts.forceBase64;\n  }\n  /**\n   * Transport name.\n   *\n   * @api public\n   */\n\n\n  get name() {\n    return \"websocket\";\n  }\n  /**\n   * Opens socket.\n   *\n   * @api private\n   */\n\n\n  doOpen() {\n    if (!this.check()) {\n      // let probe timeout\n      return;\n    }\n\n    const uri = this.uri();\n    const protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n    const opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n\n    if (this.opts.extraHeaders) {\n      opts.headers = this.opts.extraHeaders;\n    }\n\n    try {\n      this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n    } catch (err) {\n      return this.emitReserved(\"error\", err);\n    }\n\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n    this.addEventListeners();\n  }\n  /**\n   * Adds event listeners to the socket\n   *\n   * @api private\n   */\n\n\n  addEventListeners() {\n    this.ws.onopen = () => {\n      if (this.opts.autoUnref) {\n        this.ws._socket.unref();\n      }\n\n      this.onOpen();\n    };\n\n    this.ws.onclose = closeEvent => this.onClose({\n      description: \"websocket connection closed\",\n      context: closeEvent\n    });\n\n    this.ws.onmessage = ev => this.onData(ev.data);\n\n    this.ws.onerror = e => this.onError(\"websocket error\", e);\n  }\n  /**\n   * Writes data to socket.\n   *\n   * @param {Array} array of packets.\n   * @api private\n   */\n\n\n  write(packets) {\n    this.writable = false; // encodePacket efficient as it uses WS framing\n    // no need for encodePayload\n\n    for (let i = 0; i < packets.length; i++) {\n      const packet = packets[i];\n      const lastPacket = i === packets.length - 1;\n      encodePacket(packet, this.supportsBinary, data => {\n        // always create a new object (GH-437)\n        const opts = {};\n\n        if (!usingBrowserWebSocket) {\n          if (packet.options) {\n            opts.compress = packet.options.compress;\n          }\n\n          if (this.opts.perMessageDeflate) {\n            const len = // @ts-ignore\n            \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n            if (len < this.opts.perMessageDeflate.threshold) {\n              opts.compress = false;\n            }\n          }\n        } // Sometimes the websocket has already been closed but the browser didn't\n        // have a chance of informing us about it yet, in that case send will\n        // throw an error\n\n\n        try {\n          if (usingBrowserWebSocket) {\n            // TypeError is thrown when passing the second argument on Safari\n            this.ws.send(data);\n          } else {\n            this.ws.send(data, opts);\n          }\n        } catch (e) {}\n\n        if (lastPacket) {\n          // fake drain\n          // defer to next tick to allow Socket to clear writeBuffer\n          nextTick(() => {\n            this.writable = true;\n            this.emitReserved(\"drain\");\n          }, this.setTimeoutFn);\n        }\n      });\n    }\n  }\n  /**\n   * Closes socket.\n   *\n   * @api private\n   */\n\n\n  doClose() {\n    if (typeof this.ws !== \"undefined\") {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  /**\n   * Generates uri for connection.\n   *\n   * @api private\n   */\n\n\n  uri() {\n    let query = this.query || {};\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\n    let port = \"\"; // avoid port if default for schema\n\n    if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n      port = \":\" + this.opts.port;\n    } // append timestamp to URI\n\n\n    if (this.opts.timestampRequests) {\n      query[this.opts.timestampParam] = yeast();\n    } // communicate binary support capabilities\n\n\n    if (!this.supportsBinary) {\n      query.b64 = 1;\n    }\n\n    const encodedQuery = encode(query);\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n    return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + (encodedQuery.length ? \"?\" + encodedQuery : \"\");\n  }\n  /**\n   * Feature detection for WebSocket.\n   *\n   * @return {Boolean} whether this transport is available.\n   * @api public\n   */\n\n\n  check() {\n    return !!WebSocket;\n  }\n\n}","map":{"version":3,"names":["Transport","encode","yeast","pick","defaultBinaryType","nextTick","usingBrowserWebSocket","WebSocket","encodePacket","isReactNative","navigator","product","toLowerCase","WS","constructor","opts","supportsBinary","forceBase64","name","doOpen","check","uri","protocols","extraHeaders","headers","ws","err","emitReserved","binaryType","socket","addEventListeners","onopen","autoUnref","_socket","unref","onOpen","onclose","closeEvent","onClose","description","context","onmessage","ev","onData","data","onerror","e","onError","write","packets","writable","i","length","packet","lastPacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","setTimeoutFn","doClose","close","query","schema","secure","port","Number","timestampRequests","timestampParam","b64","encodedQuery","ipv6","hostname","indexOf","path"],"sources":["/Users/tk/workspaces/personal/repos/frontend-challenges/chat/node_modules/engine.io-client/build/esm/transports/websocket.js"],"sourcesContent":["import { Transport } from \"../transport.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = closeEvent => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent\n        });\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return !!WebSocket;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}